// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model workspace {
  groupId           Int                @id @unique
  config            config[]
  roles             role[]
  wallposts         wallPost[]
  sessionTypes      SessionType[]
  activitySessions  ActivitySession[]
  inactivityNotices inactivityNotice[]
}

model config {
  id               Int        @id @default(autoincrement())
  key              String
  value            Json
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  workspace        workspace? @relation(fields: [workspaceGroupId], references: [groupId])
  workspaceGroupId Int
}

model instanceConfig {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model user {
  userid       Int        @id @unique
  passwordhash String
  tfa          String?
  isOwner      Boolean?
  picture      String?
  username     String?
  roles        role[]
  wallPosts    wallPost[]
  sessions     Session[]
}

model role {
  id               String        @id @unique @default(uuid()) @db.Uuid()
  permissions      Json[]
  isOwnerRole      Boolean?      @default(false)
  workspace        workspace?    @relation(fields: [workspaceGroupId], references: [groupId])
  members          user[]
  workspaceGroupId Int
  name             String
  SessionType      SessionType[]
}

model wallPost {
  id               Int       @id @default(autoincrement())
  content          String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  author           user?     @relation(fields: [authorId], references: [userid])
  workspace        workspace @relation(fields: [workspaceGroupId], references: [groupId])
  workspaceGroupId Int
  authorId         Int
}

model SessionType {
  id               String     @id @unique @default(uuid()) @db.Uuid()
  name             String
  gameId           Int?
  schedule         schedule[]
  allowUnscheduled Boolean
  sessions         Session[]
  hostingRoles     role[]
  workspace        workspace? @relation(fields: [workspaceGroupId], references: [groupId])
  workspaceGroupId Int
}

model schedule {
  id            String      @id @unique @default(uuid()) @db.Uuid()
  Days          String[]
  Hour          Int
  Minute        Int
  sessionType   SessionType @relation(fields: [sessionTypeId], references: [id])
  sessionTypeId String      @db.Uuid()
  sessions      Session[]
}

model Session {
  id            String      @id @unique @default(uuid()) @db.Uuid()
  owner         user        @relation(fields: [ownerId], references: [userid])
  ownerId       Int
  date          DateTime
  startedAt     DateTime?
  ended         DateTime?
  sessionType   SessionType @relation(fields: [sessionTypeId], references: [id])
  sessionTypeId String      @db.Uuid()
  schedule      schedule?   @relation(fields: [scheduleId], references: [id])
  scheduleId    String?     @db.Uuid()
}

model ActivitySession {
  id               String     @id @unique @default(uuid()) @db.Uuid()
  userId           Int
  active           Boolean
  startTime        DateTime
  endTime          DateTime?
  idleTime         Int?
  workspace        workspace? @relation(fields: [workspaceGroupId], references: [groupId])
  workspaceGroupId Int
}

model inactivityNotice {
  id               String     @id @unique @default(uuid()) @db.Uuid()
  userId           Int
  startTime        DateTime
  endTime          DateTime?
  reason           String
  workspace        workspace? @relation(fields: [workspaceGroupId], references: [groupId])
  workspaceGroupId Int
}
